@page "/"
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Entities
@using UpSchool.Domain.Services
@using UpSchool.Domain.Utilities
@using UpSchool.Wasm.Common.Utilities
@using UpSchool.Wasm.Components
@inject IJSRuntime JsRuntime
@inject IToasterService ToastService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row ">
        <div class="col-md-12">
            <div class="p-5 mb-4 bg-light rounded-3">
                <div class="container-fluid">
                    <h1 class="display-5 fw-bold text-center">My Accounts</h1>
                    <hr />

                    <div class="d-flex flex-row">
                        <button class="btn btn-success" @onclick="@(() => NavigationManager.NavigateTo("/accounts/add"))">Add</button>
                        <input type="text" @oninput=@searchInputChange class="form-control w-25 ms-2"placeholder="Search"/>
                        <select class="form-control w-25 ms-2" @onchange=@OnSelectChange>
                            <option value="true">Ascending</option>
                            <option value="false">Descending</option>
                        </select>
                    </div>
        
                    <div class="row">
                        @foreach (var account in accounts)
                        {
                            <div class="col-md-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="card-title text-center text-primary">@account.Title</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="input-group text-center">
                                            <input type="text" class="form-control text-center" value="@account.UserName">
                                            <span class="input-group-text oi oi-document clickable" id="basic-addon1" @onclick="@(() => CopyUserNameToClipBoardAsync(account.UserName))"></span>
                                        </div>
                                        <div class="input-group text-center mt-2">
                                            @if (account.ShowPassword)
                                            {
                                                <input type="text" class="form-control text-center" value="@account.Password">
                                            }
                                            else
                                            {
                                                <input type="password" class="form-control text-center" value="@account.Password">
                                            }
                                            <span class="input-group-text oi oi-eye clickable" @onclick="@(() =>SetShowPassword(account))"></span>
                                            <span class="input-group-text oi oi-document clickable" @onclick="@(() =>CopyToClipboardAsync(account.ShowPassword, account.Password))"></span>

                                            <iconify-icon icon="mdi:alert"
                                                      style="color: #ba3329; font-size: 48px"></iconify-icon>
                                        </div>

                                    </div>
                                  <div class="card-footer">
                                      <div class="d-flex justify-content-between">
                                            <button class="btn btn-info" @onclick="@(() => GoToEditPage(account.Id))">Edit</button>
                                            <button class="btn btn-danger" @onclick="@(() =>DeleteAccountAsync(account.Id))">Delete</button>
                                      </div>
                                  </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



    @code
{
    List<AccountDto> accounts = new ();

    private string searchKeyword = string.Empty;

    private bool isAscending = true;

    protected override async Task OnInitializedAsync()
    {

        accounts = await FetchAccountsAsync();

        await base.OnInitializedAsync();
    }


    private ValueTask CopyToClipboardAsync(bool showPassword, string password)
    {
        ToastService.ShowSuccess("The selected password was copied to the clipboard.");

        if (!showPassword)
            password = StringHelper.Base64Decode(password);

        return JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);
    }

    private ValueTask CopyUserNameToClipBoardAsync(string userName)
    {
        ToastService.ShowSuccess("The selected UserName was copied to the clipboard.");

        return JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", userName);
    }

    private async Task OnSelectChange(ChangeEventArgs args)
    {

        if (args is null) return;

        isAscending = Convert.ToBoolean(args.Value);

        accounts = await FetchAccountsAsync();
    }

    private Task<List<AccountDto>?> FetchAccountsAsync()
    {
        return HttpClient.GetFromJsonAsync<List<AccountDto>>($"Accounts?isAscending={isAscending}");
    }

    private void GoToEditPage(Guid id)
    {
        NavigationManager.NavigateTo($"/accounts/edit/{id}");
    }

    private async Task searchInputChange(ChangeEventArgs args)
    {
        if(args is not null && !string.IsNullOrEmpty(args.Value.ToString()))
        {
            searchKeyword = args.Value.ToString();

            await OnSearchAsync();
        } else
        {
            searchKeyword = string.Empty;

            accounts = await FetchAccountsAsync();
        }
    }

    private async Task OnSearchAsync()
    {
        //  if(string.IsNullOrEmpty(searchKeyword) || searchKeyword.Length <2)
        if(string.IsNullOrEmpty(searchKeyword))
        {
            return;
        }
        var searchedAccounts = await HttpClient.GetFromJsonAsync<List<AccountDto>>($"Accounts?searchKeyword={searchKeyword}&isAscending={isAscending}");

        accounts = searchedAccounts;
    }

    

    private void SetShowPassword(AccountDto accountDto)
    {
        accountDto.ShowPassword = !accountDto.ShowPassword;

        if(accountDto.ShowPassword)
        {
            accountDto.Password = StringHelper.Base64Decode(accountDto.Password);
            Console.WriteLine();
            return;
        }

        accountDto.Password = StringHelper.Base64Encode(accountDto.Password);
    }

    private async Task DeleteAccountAsync(Guid id)
    {
        var response = await HttpClient.DeleteAsync($"Accounts/{id}");
        if (response.IsSuccessStatusCode)
        {
            var account = accounts.FirstOrDefault(x => x.Id == id);
            accounts.Remove(account);
            ToastService.ShowSuccess("The selected account was successfully deleted.");
            return;
        }

        ToastService.ShowError("An unexpected error occured.");
        return;
    }



}

<style>
    body {
        background: #393E46
    }
</style>